name: CMake Cross-Platform Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: macos-latest
            c_compiler: gcc  # GCC not readily available on macOS runners

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Clean any existing build directory
      run: |
        rm -rf ${{ steps.strings.outputs.build-output-dir }}
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}

    - name: Configure CMake
      run: |
        echo "Configuring CMake on ${{ matrix.os }} with ${{ matrix.c_compiler }}"
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S ${{ github.workspace }}

    - name: Build
      run: |
        echo "Building on ${{ matrix.os }} with ${{ matrix.c_compiler }} (${{ matrix.build_type }})"
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 4

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        echo "Running tests on ${{ matrix.os }}"
        ctest --build-config ${{ matrix.build_type }} --output-on-failure --parallel 4

    - name: Upload build artifacts
      if: matrix.build_type == 'Release'
      run: |
        echo "Build completed successfully on ${{ matrix.os }} with ${{ matrix.c_compiler }}"
        if [ -d "${{ steps.strings.outputs.build-output-dir }}" ]; then
          echo "Build directory contents:"
          find ${{ steps.strings.outputs.build-output-dir }} -type f -name "*" | head -20
        fi

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "=== CMake Cross-Platform Build Summary ==="
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo ""
        echo "Platforms tested: Ubuntu + macOS"
        echo "Compilers tested: GCC (Ubuntu), Clang (both platforms)"
        echo "Build types: Release + Debug"
        echo ""
        echo "Build Status: ${{ needs.build.result }}"
        echo ""
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ All builds passed across platforms and compilers!"
        else
          echo "❌ Some builds failed. Check individual job results above."
        fi
